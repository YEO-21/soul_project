using System.Collections;
using System.Collections.Generic;
using UnityEngine;



/// <summary>
/// 플레이어 캐릭터 공격을 관리하는 컴포넌트
/// </summary>
public sealed class PlayerCharacterAttack : MonoBehaviour
{
    /// <summary>
    /// 플레이어 공격 정보 ScriptableObject 에셋
    /// </summary>
    private PlayerAttackInfoScriptableObject _PlayerAttackInfoScriptableObject;


    /// <summary>
    /// 현재 공격
    /// </summary>
    private PlayerAttackBase _CurrentAttack;


    /// <summary>
    /// 다음 공격
    /// </summary>
    private PlayerAttackBase _NextAttack;

    /// <summary>
    /// 공격 시작 이벤트
    /// </summary>
    public event System.Action<int /*attackCode*/> onAttackStarted;

    private void Awake()
    {
        // 플레이어 공격 정보 에셋을 얻습니다.
        _PlayerAttackInfoScriptableObject = 
            GameManager.instance.m_PlayerAttackInfoScriptableObject;
    }

    public void Initialize(PlayerCharacterAnimController animController)
    {
        animController.onAttackAnimationFinished += CALLBACK_OnAttackAnimationFinished;
    }

    private void Update()
    {
        AttackProcedure();
    }

    /// <summary>
    /// 요청된 공격을 처리합니다.
    /// </summary>
    private void AttackProcedure()
    {
        // 요청된 다음 공격이 존재하지 않는다면 함수 호출 종료
        if (_NextAttack == null) return;

        // 현재 공격이 실행중인 경우 함수 호출 종료
        if (_CurrentAttack != null) return;

        // 요청된 공격을 현재 공격으로 설정합니다.
        _CurrentAttack = _NextAttack;

        // 요청된 공격 처리 완료
        _NextAttack = null;

        // 공격 시작됨 이벤트 발생
        onAttackStarted?.Invoke(_CurrentAttack.attackInfo.intAttackCode);
    }

    /// <summary>
    /// 연계 가능한 공격 코드로 변환합니다.
    /// 만약 연계 가능한 공격이 요청된 경우, 전달한 매개 변수의 값을 연계 가능한 공격 코드로 설정합니다.
    /// 연계 불가능한 공격이 요청된 경우, 전달한 매개 변수의 값을 변경하지 않습니다.
    /// </summary>
    /// <param name="ref_AttackCode">변환할 공격 코드를 전달합니다.</param>
    private void ConvertLinkableAttackCode(ref string ref_AttackCode)
    {
        // 현재 실행중인 공격이 없다면 실행하지 않습니다.
        if (_CurrentAttack == null) return;

        // 연계 가능한 공격 코드를 얻습니다.
        string linkableAttackCode = _CurrentAttack.ConvertToLinkableAttackCode(ref_AttackCode);

        // 연계 가능한 공격 코드가 존재한다면
        if(!string.IsNullOrEmpty(linkableAttackCode))
        {
            // 다음 공격을 연계 공격 코드로 설정합니다.
            ref_AttackCode = linkableAttackCode;
        }
    }

    /// <summary>
    /// 공격을 요청합니다.
    /// </summary>
    /// <param name="attackCode"/>요청시킬 공격 코드를 전달합니다.</param>>
    public void RequestAttack(string attackCode)
   {

        // 다음 공격을 예약하지 못하는 경우라면 함수 호출 종료
        if (_NextAttack != null) return;

        // 연계 가능한 공격 코드로 변환
        ConvertLinkableAttackCode(ref attackCode);

        // 공격 정보를 얻습니다.
        PlayerAttackInfo attackInfo;
        if (!_PlayerAttackInfoScriptableObject.TryGetPlayerAttackInfo(
            attackCode, out attackInfo)) return;

        // 다음 공격을 설정합니다
        _NextAttack = PlayerAttackBase.GetPlayerAttack(attackInfo);

        Debug.Log($"예약된 공격 이름 : {_NextAttack.attackInfo.m_AttackName}");
   }


    /// <summary>
    /// 공격 애니메이션이 끝났을 경우 호출되는 메서드
    /// </summary>
    private void CALLBACK_OnAttackAnimationFinished()
    {
        _CurrentAttack = null;
    }
}
